<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NLog on My New Hugo Site</title>
    <link>http://example.org/tags/nlog/</link>
    <description>Recent content in NLog on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Sep 2014 17:33:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/nlog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NLog.Elmah</title>
      <link>http://example.org/posts/2014/09/nlog-elmah/</link>
      <pubDate>Thu, 18 Sep 2014 17:33:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2014/09/nlog-elmah/</guid>
      <description>NLog.Elmah套件，是用來擴充NLog的Target，可以寫到Elmah去 Elmah的用法可以參考之前的筆記 在設定好Elmah之後，開始來安裝NLog.Elmah 首先透過NuGet來安裝套件
[![](http://3.bp.blogspot.com/-7-Ra6YAOsCg/VBqk41izCYI/AAAAAAAABmI/cfGfIw-fulU/s1600/01.%E5%AE%89%E8%A3%9D%E5%A5%97%E4%BB%B6.png)](http://3.bp.blogspot.com/-7-Ra6YAOsCg/VBqk41izCYI/AAAAAAAABmI/cfGfIw-fulU/s1600/01.%E5%AE%89%E8%A3%9D%E5%A5%97%E4%BB%B6.png) 再來設定NLog來套用Elmah 主要是透過extensions來引用NLog.Elmah這個Assembly 就可以透過Elmah這個Target，把Log寫到Elmah去
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt; &amp;amp;lt;extensions&amp;amp;gt; &amp;amp;lt;add assembly=&amp;quot;NLog.Elmah&amp;quot;/&amp;amp;gt; &amp;amp;lt;/extensions&amp;amp;gt; &amp;amp;lt;targets&amp;amp;gt; &amp;amp;lt;target xsi:type=&amp;quot;Elmah&amp;quot; name=&amp;quot;elmah&amp;quot; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}&amp;quot;/&amp;amp;gt; &amp;amp;lt;/targets&amp;amp;gt; &amp;amp;lt;rules&amp;amp;gt; &amp;amp;lt;logger name=&amp;quot;*&amp;quot; minlevel=&amp;quot;Trace&amp;quot; writeTo=&amp;quot;elmah&amp;quot; /&amp;amp;gt; &amp;amp;lt;/rules&amp;amp;gt;  &amp;lt;/nlog&amp;gt; 
就可以在elmah中看到寫出的記錄，只是沒有Type，HttpStatusCode也都是0
[![](http://2.bp.blogspot.com/-IlyVebdJVBw/VBqmnO3VBJI/AAAAAAAABmU/MfcOlbctXZQ/s1600/02.%E5%AF%AB%E5%87%BA.png)](http://2.bp.blogspot.com/-IlyVebdJVBw/VBqmnO3VBJI/AAAAAAAABmU/MfcOlbctXZQ/s1600/02.%E5%AF%AB%E5%87%BA.png) 如果加上LogLevelAsType=&amp;quot;true&amp;quot;這個屬性
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; autoReload=&#34;true&#34;&amp;gt; &amp;amp;lt;extensions&amp;amp;gt; &amp;amp;lt;add assembly=&amp;quot;NLog.Elmah&amp;quot;/&amp;amp;gt; &amp;amp;lt;/extensions&amp;amp;gt; &amp;amp;lt;targets&amp;amp;gt; &amp;amp;lt;target xsi:type=&amp;quot;Elmah&amp;quot; name=&amp;quot;elmah&amp;quot; LogLevelAsType=&amp;quot;true&amp;quot; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}&amp;quot;/&amp;amp;gt; &amp;amp;lt;/targets&amp;amp;gt; &amp;amp;lt;rules&amp;amp;gt; &amp;amp;lt;logger name=&amp;quot;*&amp;quot; minlevel=&amp;quot;Trace&amp;quot; writeTo=&amp;quot;elmah&amp;quot; /&amp;amp;gt; &amp;amp;lt;/rules&amp;amp;gt;  &amp;lt;/nlog&amp;gt;</description>
    </item>
    
    <item>
      <title>NLog Database Target</title>
      <link>http://example.org/posts/2014/09/nlog-database-target/</link>
      <pubDate>Thu, 18 Sep 2014 13:36:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2014/09/nlog-database-target/</guid>
      <description>NLog要把Log存到資料庫的話，可以透過Database這個taget
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; autoReload=&#34;true&#34;&amp;gt; &amp;lt;targets&amp;gt; &amp;lt;target xsi:type=&#34;Database&#34; name=&#34;db&#34; connectionString=&#34;data source=(localdb)\v11.0;database=LogDB; trusted_connection=true;&#34; commandText=&#34;INSERT INTO NLog_Error(ThreadId, MachineName, LogName, LogLevel, LogMessage, CallSite, Exception, Stacktrace) VALUES (@ThreadId, @MachineName, @LogName, @LogLevel, @LogMessage, @CallSite, @Exception, @Stacktrace);&#34;&amp;gt; &amp;lt;parameter name=&#34;@ThreadId&#34; layout=&#34;${threadid}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@MachineName&#34; layout=&#34;${machinename}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@LogName&#34; layout=&#34;${logger}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@LogLevel&#34; layout=&#34;${level}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@LogMessage&#34; layout=&#34;${message}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@CallSite&#34; layout=&#34;${callsite:filename=true}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@Exception&#34; layout=&#34;${exception}&#34;/&amp;gt; &amp;lt;parameter name=&#34;@stacktrace&#34; layout=&#34;${stacktrace}&#34;/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/targets&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;logger name=&#34;*&#34; minlevel=&#34;Trace&#34; writeTo=&#34;db&#34; /&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/nlog&amp;gt; 資料庫的Table Schema</description>
    </item>
    
    <item>
      <title>個人常用Log格式筆記</title>
      <link>http://example.org/posts/2014/08/%E5%80%8B%E4%BA%BA%E5%B8%B8%E7%94%A8log%E6%A0%BC%E5%BC%8F%E7%AD%86%E8%A8%98/</link>
      <pubDate>Thu, 28 Aug 2014 18:35:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2014/08/%E5%80%8B%E4%BA%BA%E5%B8%B8%E7%94%A8log%E6%A0%BC%E5%BC%8F%E7%AD%86%E8%A8%98/</guid>
      <description>個人常用的Log格式，在此記錄一下
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; autoReload=&#34;true&#34;&amp;gt; &amp;amp;lt;!--  See https://github.com/nlog/nlog/wiki/Configuration-file for information on customizing logging rules and outputs. &amp;ndash;&amp;gt; &amp;lt;targets async=&amp;quot;true&amp;rdquo;&amp;gt; &amp;lt;default-wrapper xsi:type=&amp;quot;BufferingWrapper&amp;rdquo; bufferSize=&amp;quot;500&amp;rdquo; flushTimeout=&amp;quot;3000&amp;rdquo; /&amp;gt;
 &amp;amp;lt;target xsi:type=&amp;quot;Chainsaw&amp;quot; name=&amp;quot;console&amp;quot; address=&amp;quot;udp4://127.0.0.1:7071&amp;quot; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}&amp;quot; /&amp;amp;gt; &amp;amp;lt;target xsi:type=&amp;quot;File&amp;quot; name=&amp;quot;file&amp;quot; fileName=&amp;quot;D:\LogFiles\Proj_Log\${shortdate}\${date:format=yyyy-MM-dd-HH}.log&amp;quot; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}${newline}${onexception:inner=${newline}Exception:${newline}${exception:format=ToString}${newline}}STACKTRACE:${newline}${stacktrace:format=DetailedFlat}&amp;quot; /&amp;amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;pre class=&amp;quot;brush:xml&amp;quot;&amp;gt; &amp;amp;lt;/targets&amp;amp;gt; &amp;amp;lt;rules&amp;amp;gt; &amp;amp;lt;logger name=&amp;quot;*&amp;quot; minlevel=&amp;quot;Trace&amp;quot; writeTo=&amp;quot;console,file&amp;quot; /&amp;amp;gt; &amp;amp;lt;/rules&amp;amp;gt;  &amp;lt;/nlog&amp;gt;</description>
    </item>
    
    <item>
      <title>Common.Logging</title>
      <link>http://example.org/posts/2013/12/common-logging/</link>
      <pubDate>Tue, 24 Dec 2013 15:45:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2013/12/common-logging/</guid>
      <description>在開始使用log4net或NLog這種Logging元件來處理log，是一個很美好的開發經驗，但在開發類別庫專案的時後，會碰到循環參考的問題，這時後改用Common.Logging會比較好
Common.Logging是一個Log介面，可以支援log4net、NLog、Enterprise Library Logging，透過設定檔把Log轉接到真正要使用的Log元件，在日後轉換Log元件的時後很方便，詳細的介紹可以參考官網，以下用一個類別庫專案搭配一個應用程式來介紹這個元件的使用方式
Common.Logging 2.2.0版之後，相依於Common.Logging.Core套件 應該是為了可儶性，把介面和抽象類別分離到Core套件 在套件的使用上要做點調整
Common Logging 2.3.1版之後，已不再使用Common.Logging.Core 為了比較好在Log套件的多個版本之間切換，對應的Log套件後面都會有指定的版本 例如Common.Logging.NLog31對應到NLog 3.1版本
首先開啟一個類別庫專案，並透過NuGet加入Common.Logging參考
[![](http://1.bp.blogspot.com/-YZT52XVZA3Q/VHKbhm-Vn9I/AAAAAAAABvo/xwz2a-Mpg_Q/s1600/01.NuGet%E5%A5%97%E4%BB%B6.png)](http://1.bp.blogspot.com/-YZT52XVZA3Q/VHKbhm-Vn9I/AAAAAAAABvo/xwz2a-Mpg_Q/s1600/01.NuGet%E5%A5%97%E4%BB%B6.png) 簡單寫一個函式讓之後引用的程式來呼叫
using Common.Logging; namespace ClassLibrary1 { public class Class1 { private ILog log = LogManager.GetLogger&amp;lt;Class1&amp;gt;());
 public void SayHello() { this.log.Info(&amp;quot;Hello&amp;quot;); } }  }  再來新增一個Windows Form應用程式，並引用剛寫的庫別庫專案
[![](http://4.bp.blogspot.com/-xaXV4Oh0V4A/Urk59141GjI/AAAAAAAAA4o/tmXK3kNuKj0/s1600/02.ref.png)](http://4.bp.blogspot.com/-xaXV4Oh0V4A/Urk59141GjI/AAAAAAAAA4o/tmXK3kNuKj0/s1600/02.ref.png) 簡單寫一個Button Click來呼叫類別庫中的函式 using System; using System.Windows.Forms; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1() { InitializeComponent(); }
 private void button1_Click(object sender, EventArgs e) { ClassLibrary1.</description>
    </item>
    
    <item>
      <title>好用的LogViewer</title>
      <link>http://example.org/posts/2013/11/%E5%A5%BD%E7%94%A8%E7%9A%84logviewer/</link>
      <pubDate>Mon, 04 Nov 2013 18:25:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2013/11/%E5%A5%BD%E7%94%A8%E7%9A%84logviewer/</guid>
      <description>Log2Console是個好用的Log Viewer，可以配合Log4Net或NLog使用 首先到官網下載
[![](http://1.bp.blogspot.com/-1SU04Sq3oOc/UndxtGbDi3I/AAAAAAAAA14/21nZBzzTQVg/s1600/01.download.png)](http://1.bp.blogspot.com/-1SU04Sq3oOc/UndxtGbDi3I/AAAAAAAAA14/21nZBzzTQVg/s1600/01.download.png) 安裝好後先設定接收方式
[![](http://4.bp.blogspot.com/-hx4I28pk5po/Undxwe6iabI/AAAAAAAAA2A/1VERa_k_LQs/s1600/02.receive.png)](http://4.bp.blogspot.com/-hx4I28pk5po/Undxwe6iabI/AAAAAAAAA2A/1VERa_k_LQs/s1600/02.receive.png) 這裡以UDP為例
[![](http://2.bp.blogspot.com/-DyJoQXRgRBo/Undx0h2GzVI/AAAAAAAAA2I/1L9xaWi3D3Q/s1600/03.add.png)](http://2.bp.blogspot.com/-DyJoQXRgRBo/Undx0h2GzVI/AAAAAAAAA2I/1L9xaWi3D3Q/s1600/03.add.png) 設定要使用的Port號就行了 下方是log4net的設定範例
[![](http://3.bp.blogspot.com/-GkGKo0EWtOU/Undx4VhUDRI/AAAAAAAAA2Q/CBvil9xgUg4/s1600/04.udpport.png)](http://3.bp.blogspot.com/-GkGKo0EWtOU/Undx4VhUDRI/AAAAAAAAA2Q/CBvil9xgUg4/s1600/04.udpport.png) 以NLog來當日誌輸出元件的話，可以透過Chainsaw將Log寫到指定的位址和埠號
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt; &amp;amp;lt;!--  See http://nlog-project.org/wiki/Configuration_file for information on customizing logging rules and outputs. &amp;ndash;&amp;gt; &amp;lt;targets&amp;gt; &amp;lt;target xsi:type=&amp;quot;Chainsaw&amp;rdquo; name=&amp;quot;viewer&amp;rdquo; address=&amp;quot;tcp://127.0.0.1:7071&amp;rdquo; /&amp;gt; &amp;lt;/targets&amp;gt;
&amp;amp;lt;rules&amp;amp;gt; &amp;amp;lt;logger name=&amp;quot;*&amp;quot; minlevel=&amp;quot;Trace&amp;quot; writeTo=&amp;quot;viewer&amp;quot; /&amp;amp;gt; &amp;amp;lt;/rules&amp;amp;gt;  &amp;lt;/nlog&amp;gt; 
隨便輸出幾個Log試試
using NLog; namespace ConsoleApplication1 { class Program { private static Logger log = LogManager.GetLogger(&amp;ldquo;Program&amp;rdquo;);
 static void Main(string[] args) { log.</description>
    </item>
    
    <item>
      <title>NLog RichTextBox Target</title>
      <link>http://example.org/posts/2012/12/nlog-richtextbox-target/</link>
      <pubDate>Mon, 31 Dec 2012 02:06:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-richtextbox-target/</guid>
      <description>NLog RichTextBox Target 將Log訊息寫到RichTextBox控制項如果有現成的就指定控制項名稱，但需注意要在表單建立之後再取得Logger例如在表單建構式之後，或是在Form_Load事件之後不然還是會獨立建出一個RichTextBox出來 static Logger log; private void Form1_Load(object sender, EventArgs e) { // 需在Form_Load才取得Logger log = LogManager.GetCurrentClassLogger(); } 
屬性 完整資料請參考[官網的RichTextBox Target文件](https://github.com/nlog/nlog/wiki/RichTextBox-target)   name - Target的名稱
  layout - 輸出的格式
  autoScroll - 是否自動捲動最下方
  maxLines - 最大行數，超過會往上移動，移除最上方記錄
  controlName - 控制項名稱
  formName - 表單名稱
  useDefaultRowColoringRules - Log文字是否使用預設的顏色非同步，自動捲動，最大20行，使用預設色系的設定檔&amp;lt;?xml version=&amp;quot;1.0&amp;rdquo; encoding=&amp;quot;utf-8&amp;rdquo; ?&amp;gt; &amp;lt;nlog xmlns=&amp;quot;http://www.nlog-project.org/schemas/NLog.xsd&amp;rdquo; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;rdquo;&amp;gt;
&amp;lt;!&amp;ndash; See http://nlog-project.org/wiki/Configuration_file for information on customizing logging rules and outputs.</description>
    </item>
    
    <item>
      <title>NLog Debugger Target</title>
      <link>http://example.org/posts/2012/12/nlog-debugger-target/</link>
      <pubDate>Mon, 31 Dec 2012 01:13:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-debugger-target/</guid>
      <description>NLog Debugger Target 將Log輸出到Vistual Studio的輸出視窗，Web應用程式的開發很有幫助  屬性 基本上和其他Target一樣，沒有特別需要介紹的屬性完整資料還是參考[官網的Debugger Target文件](https://github.com/nlog/nlog/wiki/Debugger-target)    name - Target的名稱
  header - 頭部格式
  layout - 輸出格式
  footer - 尾部格式屬性很簡單，設定檔也簡單&amp;lt;?xml version=&amp;quot;1.0&amp;rdquo; encoding=&amp;quot;utf-8&amp;rdquo; ?&amp;gt; &amp;lt;nlog xmlns=&amp;quot;http://www.nlog-project.org/schemas/NLog.xsd&amp;rdquo; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;rdquo;&amp;gt;
&amp;lt;!&amp;ndash; See http://nlog-project.org/wiki/Configuration_file for information on customizing logging rules and outputs. &amp;ndash;&amp;gt; &amp;lt;targets&amp;gt; &amp;lt;target xsi:type=&amp;quot;Debugger&amp;rdquo; name=&amp;quot;f&amp;rdquo; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}&amp;rdquo; /&amp;gt; &amp;lt;/targets&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;logger name=&amp;rdquo;*&amp;rdquo; minlevel=&amp;quot;Trace&amp;rdquo; writeTo=&amp;quot;f&amp;rdquo; /&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/nlog&amp;gt; 
  </description>
    </item>
    
    <item>
      <title>NLog Mail Target</title>
      <link>http://example.org/posts/2012/12/nlog-mail-target/</link>
      <pubDate>Mon, 31 Dec 2012 01:07:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-mail-target/</guid>
      <description>NLog Mail Target 透過郵件把Log寄出，例如Error和Fatal等級的Log可以考慮直接寄出給管理員 屬性 完整的資料請參考[官網Mail Target文件](https://github.com/nlog/nlog/wiki/Mail-target)   html - 是否為HTML格式的郵件，預設為false encoding - 郵件編碼，預設為UTF8 subject - 郵件主題 to - 收件者 bcc - 密件副本 cc - 副本 from - 寄件者 body - 郵件內容，預設為${message} smtpUserName - 郵件主機寄信帳號 enableSsl - 是否啟用SSL通訊協定 smtpPassword - 郵件主密寄信密碼 smtpAuthentication - 郵件主機驗證模組，Basci、None、Ntml，預設為None smtpServer - 郵件主機位址 smtpPort - 郵件主機埠號，預設為25  一個簡單的範例，發生Error層級以上的Log，就寄信給管理員&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt; &amp;amp;lt;!--  See http://nlog-project.org/wiki/Configuration_file for information on customizing logging rules and outputs.</description>
    </item>
    
    <item>
      <title>NLog File Target</title>
      <link>http://example.org/posts/2012/12/nlog-file-target/</link>
      <pubDate>Mon, 31 Dec 2012 00:37:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-file-target/</guid>
      <description>NLog File Target 輸出到檔案是預設的設定，可以是一個或是多個檔案
參數 File Target可以使用的參數很多，除了特殊需求之外，大部份採用預設值就行了詳細說明請參考[官網File Target文件](https://github.com/nlog/nlog/wiki/File-target) 以下為常用的參數  name - target的名稱 layout - 輸出格式，預設為${longdate}|${level:uppercase=true}|${logger}|${message} header - 頭部格式 footer - 尾部格式 encoding - 檔案編碼，如果有中文字的話，可以指定成utf-8 fileName - 檔案名稱，配合Layout Renderers組合檔名  常用範例 非同步，每小時寫檔，UTF8格式&amp;lt;?xml version=&amp;quot;1.0&amp;rdquo; encoding=&amp;quot;utf-8&amp;rdquo; ?&amp;gt; &amp;lt;nlog xmlns=&amp;quot;http://www.nlog-project.org/schemas/NLog.xsd&amp;rdquo; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;rdquo;&amp;gt;
&amp;amp;lt;!--  See http://nlog-project.org/wiki/Configuration_file for information on customizing logging rules and outputs. &amp;ndash;&amp;gt; &amp;lt;targets&amp;gt; &amp;lt;target xsi:type=&amp;quot;AsyncWrapper&amp;rdquo; name=&amp;quot;f&amp;rdquo; queueLimit=&amp;quot;5000&amp;rdquo; overflowAction=&amp;quot;Discard&amp;rdquo;&amp;gt; &amp;lt;target xsi:type=&amp;quot;File&amp;rdquo; fileName=&amp;quot;${basedir}/logs/${date:format=yyyy-MM-dd-HH}.log&amp;rdquo; layout=&amp;quot;${longdate} ${uppercase:${level}} ${message}&amp;rdquo; encoding=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/targets&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;logger name=&amp;rdquo;*&amp;rdquo; minlevel=&amp;quot;Trace&amp;rdquo; writeTo=&amp;quot;f&amp;rdquo; /&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/nlog&amp;gt; CSV格式</description>
    </item>
    
    <item>
      <title>NLog API</title>
      <link>http://example.org/posts/2012/12/nlog-api/</link>
      <pubDate>Sun, 30 Dec 2012 23:02:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-api/</guid>
      <description>LogManager LogManager是用來建立日誌和管理設定檔用的類別，有以下幾個Method   LogManager.GetLogger - 取得或建立指定的logger 建議建立Logger的方式，需要手動指定名稱 LogManager.GetCurrentClassLogger - 取得或建立目前類別名稱的logger 雖然比較方便，但底層是以StackTrace取得名稱，成本高很多 LogManager.Configuration - 取得或設定目前日誌的設定資訊 LogManaget.GlobalThreshold - 取得或設定全域日誌的threshold   Logger NLog.Logger類別是用來輸出Log用的，有以下幾個Method用來輸出不同層級的Log每個Method都有多個overloads用來最小化內存配置以提高日誌速度  Log() - 使用指定的格式和參數，將訊息寫入指定的級別 Trace() - 使用指定的格式和參數，將訊息寫入Trace級別 Debug() - 使用指定的格式和參數，將訊息寫入Debug級別 Info() - 使用指定的格式和參數，將訊息寫入Info級別 Warn() - 使用指定的格式和參數，將訊息寫入Warn級別 Erro() - 使用指定的格式和參數，將訊息寫入Error級別 Fatal() - 使用指定的格式和參數，將訊息寫入Fatal級別以下的方法和屬性用來檢查該層級的日誌是否啟用     IsEnabled() - 確定指定的級別日誌是否啟用
  IsTraceEnabled - 確定Trace級別日誌是否啟用
  IsDebugEnabled - 確定Debug級別日誌是否啟用
  IsInfoEnabled - 確定Info級別日誌是否啟用
  IsWarnEnabled - 確定Warn級別日誌是否啟用</description>
    </item>
    
    <item>
      <title>NLog 學習筆記</title>
      <link>http://example.org/posts/2012/12/nlog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link>
      <pubDate>Sun, 30 Dec 2012 16:57:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid>
      <description>一套好用的Logging工具在開發和日後維護上很有幫助，之前一直用的是log4net，雖然功能強大，但層級式的設定檔比較複雜不容易掌握，而且相關的中文資源也不是很多
後來找到NLog這個套件，Google一下很快就上手了，而且也有不少詳細的中文資料，擴充功能也很簡單，在此記錄一下學習筆記和參考資料
NLog學習筆記 1.&amp;nbsp;[NLog 初體驗](http://blog.developer.idv.tw/2012/12/nlog.html) &amp;nbsp; &amp;nbsp; NLog的安裝、設定、和使用 2. NLog Config NLog的設定檔作用和內容
3.NLog Targets Nlog的輸出目標
4. NLog Rules NLog的輸出的路由規則
5. NLog Layout NLog的輸出格式
6. 好用的Log Viewer
7. Common.Logging
8. 個人常用Log格式
9. NLog Database Target
10. ELMAH
11. NLog.Elmah
參考資料 [NLog官網](http://nlog-project.org/) [NLog Document](https://github.com/nlog/nlog/wiki) &amp;nbsp;[mrkt 的程式學習筆記 - 系統記錄與效能監測](http://kevintsengtw.blogspot.tw/p/blog-page_12.html#.UN59kqxcUep) Dflying Chen @ cnblogs - NLog系列</description>
    </item>
    
    <item>
      <title>NLog Layouts</title>
      <link>http://example.org/posts/2012/12/nlog-layouts/</link>
      <pubDate>Sun, 30 Dec 2012 16:47:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-layouts/</guid>
      <description>NLog Layouts Layout是用來決定記錄的訊息輸出的格式，通常設定在target的屬性中這個功能可以讓我們動態增減日誌的內容，而不用回頭修改程式碼和重新編譯使用方法是$字號和左右大括號，包住Layout Renderers參數的使用方法則是冒號分隔，屬性=值的方式預設的輸出格式如下 ${longdate}|${level:uppercase=true}|${logger}|${message}    Layout Renderers   ${basedir} - 應用程式所在的資料庫 ${callsite} - 日誌來源的類別名稱、方法名稱和來源資訊 ${data} - 目前日期和時間 ${exception} - 例外的訊息 ${level} - 日誌的級別 ${logger} - 日誌的來源 ${logdate} - 長日期格式，yyyy-MM-dd HH:mm:ss.mmm ${machinename} - 電腦名稱 ${message} - 日誌的內容 ${newline} - 換行符號 ${shortdate} - 短日期格式 yyyy-MM-dd ${stacktrace} - 呼叫堆疊資訊 ${time} - 時間格式，HH:mm:ss.mmm. ${windows-identity} - 登入帳號每一個Layout Renderers還包含各自的屬性，詳細的內容可以參考官網Layout Renderers文件   Pre-Defined Layouts NLog還包含了幾個預設定義好的格式，詳細的文件請參考官網的Layout文件
 CsvLayout - CSV格式 LayoutWithHeaderAndFooter - 加上Header和Footer的格式 Log4JXmlEventLayout - Log4j相容的格式 SimpleLayout - 簡單的文字內容格式  上一篇 : [NLog Rules](http://blog.</description>
    </item>
    
    <item>
      <title>NLog Rules</title>
      <link>http://example.org/posts/2012/12/nlog-rules/</link>
      <pubDate>Sun, 30 Dec 2012 01:40:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-rules/</guid>
      <description>NLog Rules NLog使用一個簡單的路由表檢查當檢查到符合的日誌名稱和級別時，會輸出到指定的一個或多個Target去如果指定了final屬性，之後的規則就不再檢查Rules可以使用的屬性如下   name - 日誌來源的名稱(允許使用通配符號*) minlevel - 設定符合該規則的最低級別 maxlevel - 設定符合該規則的最高級別 level - 設定符合該規則的特定級別 levels - 設定符合該規則的級別列表，用逗號分隔 writeTo - 設定符合該規則的日誌要寫入的target列表，用逗號分隔 final - 設定符合該規則的條件為最後一個規則，後面的規則不再檢查以下為一些例子&amp;lt;!&amp;ndash; 命名空間Name.Space下的Class1這個類別的日誌，符合Debug以上的級別，就輸出到f1這個Target &amp;ndash;&amp;gt; &amp;lt;logger name=&amp;quot;Name.Space.Class1&amp;rdquo; minlevel=&amp;quot;Debug&amp;rdquo; writeTo=&amp;quot;f1&amp;rdquo; /&amp;gt;  &amp;lt;!&amp;ndash; 命名空間Name.Space下的Class1這個類別的日誌，符合Debug和Error這兩個級別，就輸出到f1這個Target &amp;ndash;&amp;gt; &amp;lt;logger name=&amp;quot;Name.Space.Class1&amp;rdquo; levels=&amp;quot;Debug,Error&amp;rdquo; writeTo=&amp;quot;f1&amp;rdquo; /&amp;gt;
&amp;lt;!&amp;ndash; 命名空間Name.Space下的所有類別的日誌，就輸出到f3和f4這兩個Target &amp;ndash;&amp;gt; &amp;lt;logger name=&amp;quot;Name.Space.*&amp;rdquo; writeTo=&amp;quot;f3,f4&amp;rdquo; /&amp;gt;
&amp;lt;!&amp;ndash; 命名空間Name.Space下的所有類別的日誌，級別在Debug和Error之間 也就是說級別為Debug, Info, Warn, Error，不輸出日誌，因為這條規則沒有指定writeTo 同時不再檢查之後的規則，因為這裡設定final=true &amp;ndash;&amp;gt; &amp;lt;logger name=&amp;quot;Name.Space.*&amp;rdquo; minlevel=&amp;quot;Debug&amp;rdquo; maxlevel=&amp;quot;Error&amp;rdquo; final=&amp;quot;true&amp;rdquo; /&amp;gt; 
 NLog Level NLog的日誌級別分為六個等級，方便我們對於不同情境制訂出合適的級別輸出
 Trace - 大量而詳細的訊息，一般只用在開發環境 Debug - 用來除錯用的詳細訊息，比Trace用的少一點，一般也只用在開發環境 Info - 用來提示用的訊息，例如使用者登出入，交易參數資料 Warn - 用來警告用的訊息，例如執行時間超出預期，連線數接近上限 Error - 一般錯誤的訊息，一般就是try catch到的Exception Fatal - 致命錯誤的訊息，通常會造成應用程式無法執行最簡單的設定檔配置，只要設定Rule和要寫入的Target就行了 上一篇: NLog Targets 下一篇: NLog Layouts   </description>
    </item>
    
    <item>
      <title>NLog Targets</title>
      <link>http://example.org/posts/2012/12/nlog-targets/</link>
      <pubDate>Sun, 30 Dec 2012 00:29:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-targets/</guid>
      <description>NLog Targets target用來定義Log的輸出目標，基本的兩個屬性為
 name - 目標的名稱，用來給rule路由指定的名稱 type - 目標的類型，NLog支援的類型很多，完整資料請參考官網Supported Targets文件每一個target元素代表一個輸出目標，只要name屬性值不衝突即可  &amp;lt;targets&amp;gt; &amp;lt;target name=&#34;f1&#34; xsi:type=&#34;File&#34; fileName=&#34;file1.txt&#34;/&amp;gt; &amp;lt;target name=&#34;f2&#34; xsi:type=&#34;File&#34; fileName=&#34;file2.txt&#34;/&amp;gt; &amp;lt;target name=&#34;n1&#34; xsi:type=&#34;Network&#34; address=&#34;tcp://localhost:4001&#34;/&amp;gt; &amp;lt;target name=&#34;ds&#34; xsi:type=&#34;OutputDebugString&#34;/&amp;gt; &amp;lt;/targets&amp;gt;  依照type的不同，會有相對應的屬性，例如 File需要指定FileName檔名 Database需指定資料庫相關的參數和語法 Mail需指定郵件主機等資訊 每種類型的設定方式，之後再來詳細介紹
 自訂target 要自行擴充target可以參考官網文件的How to write a target 只要繼承NLog的TargetWithLayout類別，覆寫Write(LogEventInfo logEvent)函式 再利用extensions元素或在程式碼中註冊就行了
 Wrapper Targets NLog提供幾個封裝和複合目標，用來增加target的功能  asynchronous processing (非同步功能，被封裝的target會由另一個執行緒來運行) retry-on-error(自動重試功能) buffering(緩衝處理，不會馬上寫出Log，而會依設定值累積一定數量才輸出Log) filtering(過濾條件，會依設定值決定是否輸出Log)更多詳細功能請參考官網的Wrapper Targets文件  Wrapper可以連續嵌套，以下的範例可以增加非同步和自動重試的功能&amp;lt;targets&amp;gt; &amp;lt;!-- 增加非同步功能--&amp;gt; &amp;lt;target name=&#34;n&#34; xsi:type=&#34;AsyncWrapper&#34;&amp;gt; &amp;lt;!-- 增加自動重試功能 --&amp;gt; &amp;lt;target xsi:type=&#34;RetryingWrapper&#34;&amp;gt; &amp;lt;target xsi:type=&#34;</description>
    </item>
    
    <item>
      <title>NLog Config</title>
      <link>http://example.org/posts/2012/12/nlog-config/</link>
      <pubDate>Sat, 29 Dec 2012 16:27:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-config/</guid>
      <description>NLog設定檔位置 NLog的設定檔有幾個位置，參考官網文件如下
 應用程式的標準設定檔(app.config或是web.config) 執行過程中如果需要修改NLog的配置，會造成應用程式重新啟動 應用程式所在目錄的app.exe.nlog 每個專案都要手動指定檔名比較麻煩點 應用程式所在目錄的NLog.config 建議使用的設定檔方式 Nlog.dll所在目錄的NLog.dll.config 和第三種方式差不多，還是選擇比較常見的第三種方式吧 環境變數NLOG_GLOBAL_CONFIG_FILE指定的檔案 設在這種神秘的地方，應該會被扁吧在ASP.NET或是Windows Form應用程式中有點差異，其他的專案類型有幾種方式不能用，所以建議使用最通用的第三種方式   NLog設定檔元素 Nlog的設定檔有以下五種元素，前兩種是必要項目，後三種是可選項目  targets - 定義Log的輸出目標，輸出格式的Layout也在這裡設定 rules - 定義Log的路由規則，Log的過濾條件也在這裡設定 extensions - 定義擴充元件，包含NLog擴充模組和自定義的擴充模組 include - 引用外部設定檔，簡化設定檔的複雜度和重覆利用 variable - 定義設定檔中自行設定的變數，可以統一和簡化設定檔資料   NLog設定檔自動重讀 NLog的設定檔，在執行過程中預設是不會重讀的，每個修改都需要重新啟動應用程式才能生效 如果要自動重讀的話，需要設定一個屬性autoReload=&amp;quot;true&amp;quot;才能生效
&amp;lt;nlog autoreload=&#34;true&#34;&amp;gt; ... &amp;lt;/nlog&amp;gt;   NLog設定檔疑難排解 有時後就算設好了設定檔，Log還是沒有寫出來，最常見的原因是權限問題造成的問題例如ASP.NET的w3wp.exe沒有指定資料夾寫檔案的權限這時後可以利用NLog內部的Log來查詢原因  throwExceptions - 設定是否要引發錯誤 NLog會吃掉所有內部引發的錯誤，要找問題時可以設為true，找到之後應該設回false internalLogFile - 設定內部錯誤要輸出的文件位置 直接給一個檔名就好，會輸出在執行檔所在目錄下面 internalLogLevel - 設定內部錯誤要輸出的層級 基本上要找的是Error訊息比較簡潔點，不設定的話會輸出所有詳細訊息 internalLogToConsole - 設定內部錯誤是否要輸出到Console視窗 如果不想寫檔，又有Console可以用的話，那就設定為true吧 internalLogToConsoleError - 設定內部錯誤是否要輸出到stderr串流 為了不要和應用程式正常訊息混在一起，可以把錯誤訊息重導向到stderr  上一篇 : [NLog 初體驗](http://blog.</description>
    </item>
    
    <item>
      <title>NLog 初體驗</title>
      <link>http://example.org/posts/2012/12/nlog-%E5%88%9D%E9%AB%94%E9%A9%97/</link>
      <pubDate>Sat, 29 Dec 2012 14:55:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012/12/nlog-%E5%88%9D%E9%AB%94%E9%A9%97/</guid>
      <description>先簡單介紹一下如何安裝NLog這個套件，和使用預設的設定檔來寫出Log首先讓環境簡單點，所以開一個主控台專案來當範例[![](http://1.bp.blogspot.com/-kY84lmK8n-Y/UN6LxFGNSKI/AAAAAAAAAls/avloE2j0DDU/s1600/01.NLogApp.png)](http://1.bp.blogspot.com/-kY84lmK8n-Y/UN6LxFGNSKI/AAAAAAAAAls/avloE2j0DDU/s1600/01.NLogApp.png) 接下來引用NLog最簡單的方式當然就是用NuGet安裝了如果對NuGet不熟的話，可以參考之前的[NuGet學習筆記](http://blog.developer.idv.tw/2012/12/nuget.html)NLog這個套件是NLog.dll元件本身 NLog.Config這個套件是NLog.config和NLog.xsd(用來幫助在設定檔中的IntelliSense) [![](http://1.bp.blogspot.com/-q64xvtDQs48/UN6NL4Ig1YI/AAAAAAAAAmU/ZbCqaqjTbi0/s1600/02.NugetInstall.png)](http://1.bp.blogspot.com/-q64xvtDQs48/UN6NL4Ig1YI/AAAAAAAAAmU/ZbCqaqjTbi0/s1600/02.NugetInstall.png)安裝好後，專案中就會多了這三個東西 [![](http://1.bp.blogspot.com/-JPz6V3bHo4Y/UN6NW6sNdhI/AAAAAAAAAmc/rLoiSFWHldA/s1600/03.SolutionExplorer.png)](http://1.bp.blogspot.com/-JPz6V3bHo4Y/UN6NW6sNdhI/AAAAAAAAAmc/rLoiSFWHldA/s1600/03.SolutionExplorer.png) 打開設定檔，把註解拿掉，先使用預設值來體驗一下 詳細的設定方式，之後再介紹 &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt; &amp;lt;nlog xmlns=&#34;http://www.nlog-project.org/schemas/NLog.xsd&#34; &amp;nbsp; &amp;nbsp; &amp;nbsp; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt; &amp;nbsp; &amp;nbsp; &amp;lt;!-- &amp;nbsp; See http://nlog-project.org/wiki/Configuration_file &amp;nbsp; for information on customizing logging rules and outputs. &amp;nbsp; &amp;nbsp;--&amp;gt; &amp;nbsp; &amp;nbsp; &amp;lt;targets&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;!-- add your targets here --&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;target xsi:type=&#34;File&#34; name=&#34;f&#34; fileName=&#34;${basedir}/logs/${shortdate}.log&#34; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; layout=&#34;${longdate} ${uppercase:${level}} ${message}&#34; /&amp;gt; &amp;nbsp; &amp;nbsp; &amp;lt;/targets&amp;gt; &amp;nbsp; &amp;nbsp; &amp;lt;rules&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>